<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rabbit</title>
  <icon>https://www.gravatar.com/avatar/055bee2e945505e225cc791403976be6</icon>
  <subtitle>改变自己,从现在做起</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.henda.club/"/>
  <updated>2020-01-01T13:32:16.282Z</updated>
  <id>http://www.henda.club/</id>
  
  <author>
    <name>John</name>
    <email>635253084@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java技术栈目录索引</title>
    <link href="http://www.henda.club/2020/01/01/JavaStacks/Java%E6%8A%80%E6%9C%AF%E6%A0%88%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95/"/>
    <id>http://www.henda.club/2020/01/01/JavaStacks/Java%E6%8A%80%E6%9C%AF%E6%A0%88%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95/</id>
    <published>2020-01-01T17:00:00.000Z</published>
    <updated>2020-01-01T13:32:16.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="My-Java技术栈"><a href="#My-Java技术栈" class="headerlink" title="My Java技术栈"></a>My Java技术栈</h1><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><ul><li><h3 id="语言进阶"><a href="#语言进阶" class="headerlink" title="语言进阶"></a>语言进阶</h3></li><li><h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3></li><li><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3></li><li><h3 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h3></li><li><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3></li><li><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3></li></ul><h2 id="分布式篇"><a href="#分布式篇" class="headerlink" title="分布式篇"></a>分布式篇</h2><ul><li><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3></li><li><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3></li><li><h4 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h4></li><li><h4 id="NIO网络编程框架Netty"><a href="#NIO网络编程框架Netty" class="headerlink" title="NIO网络编程框架Netty"></a>NIO网络编程框架Netty</h4></li><li><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3></li></ul><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ul><li><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3></li><li><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3></li><li><h3 id="NoSql数据库（-MongoDB）"><a href="#NoSql数据库（-MongoDB）" class="headerlink" title="NoSql数据库（ MongoDB）"></a>NoSql数据库（ MongoDB）</h3></li><li><h3 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h3></li><li><h3 id="消息中间件（ActiveMQ-Kafka-RabbitMQ-RockerMQ）"><a href="#消息中间件（ActiveMQ-Kafka-RabbitMQ-RockerMQ）" class="headerlink" title="消息中间件（ActiveMQ Kafka RabbitMQ RockerMQ）"></a>消息中间件（ActiveMQ Kafka RabbitMQ RockerMQ）</h3></li><li><h3 id="ElasticSerarch"><a href="#ElasticSerarch" class="headerlink" title="ElasticSerarch"></a>ElasticSerarch</h3></li></ul><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><ul><li><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3></li><li><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3></li><li><h3 id="Webflux"><a href="#Webflux" class="headerlink" title="Webflux"></a>Webflux</h3></li></ul><h2 id="应用部门"><a href="#应用部门" class="headerlink" title="应用部门"></a>应用部门</h2><ul><li><h3 id="容器化"><a href="#容器化" class="headerlink" title="容器化"></a>容器化</h3></li></ul><h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;My-Java技术栈&quot;&gt;&lt;a href=&quot;#My-Java技术栈&quot; class=&quot;headerlink&quot; title=&quot;My Java技术栈&quot;&gt;&lt;/a&gt;My Java技术栈&lt;/h1&gt;&lt;h2 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Java" scheme="http://www.henda.club/categories/Java/"/>
    
      <category term="JDK" scheme="http://www.henda.club/categories/Java/JDK/"/>
    
    
      <category term="Java" scheme="http://www.henda.club/tags/Java/"/>
    
      <category term="JDK" scheme="http://www.henda.club/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>CLR 装箱和拆箱学习笔记</title>
    <link href="http://www.henda.club/2019/04/12/clr/CLR%20%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.henda.club/2019/04/12/clr/CLR%20%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-04-12T21:25:46.000Z</published>
    <updated>2020-01-01T13:32:16.282Z</updated>
    
    <content type="html"><![CDATA[<p>.Net中类型分成两类，<strong>引用类型</strong>和<strong>值类型</strong>，这两种类型之间转换的时候会产生<strong>装箱</strong>和<strong>拆箱</strong>操作。这两个操作到底发生了什么，有哪些问题需要注意</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>值类型=&gt;引用类型 ：<strong>装箱</strong></li><li>引用类型=&gt;值类型 :  <strong>拆箱</strong></li></ul><h4 id="两种类型是如何分配内存的？"><a href="#两种类型是如何分配内存的？" class="headerlink" title="两种类型是如何分配内存的？"></a>两种类型是如何分配内存的？</h4><p>程序启动会有有<strong>线程栈</strong>，值类型的内存是分配在栈上，而引用类型的是分配在<strong>托管堆</strong>上，线程栈上只是存储了<strong>对象地址</strong>。如下图：</p><h4 id="装箱和拆箱都做了什么"><a href="#装箱和拆箱都做了什么" class="headerlink" title="装箱和拆箱都做了什么"></a>装箱和拆箱都做了什么</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RabbitDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123; </span><br><span class="line">            <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">object</span> dataObj = data;   <span class="comment">// 装箱</span></span><br><span class="line">          </span><br><span class="line">            Console.WriteLine(data);</span><br><span class="line">            Console.WriteLine(dataObj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;.Net中类型分成两类，&lt;strong&gt;引用类型&lt;/strong&gt;和&lt;strong&gt;值类型&lt;/strong&gt;，这两种类型之间转换的时候会产生&lt;strong&gt;装箱&lt;/strong&gt;和&lt;strong&gt;拆箱&lt;/strong&gt;操作。这两个操作到底发生了什么，有哪些问题需要注意&lt;/p
      
    
    </summary>
    
    
      <category term="CLR" scheme="http://www.henda.club/categories/CLR/"/>
    
      <category term="C#" scheme="http://www.henda.club/categories/CLR/C/"/>
    
      <category term="Net" scheme="http://www.henda.club/categories/CLR/C/Net/"/>
    
    
      <category term="CLR" scheme="http://www.henda.club/tags/CLR/"/>
    
      <category term="C#" scheme="http://www.henda.club/tags/C/"/>
    
      <category term="Net" scheme="http://www.henda.club/tags/Net/"/>
    
  </entry>
  
  <entry>
    <title>Supervisior使用总结</title>
    <link href="http://www.henda.club/2019/04/04/Supervisior%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://www.henda.club/2019/04/04/Supervisior%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2019-04-04T13:29:46.000Z</published>
    <updated>2020-01-01T13:32:16.282Z</updated>
    
    <content type="html"><![CDATA[<p>Supervisiors是用python编写的linux下一款进程控制软件，控制进程的开启，停止，重启操作,可以自动重启异常中断的服务。可以通过配置webserver实现web端对服务的监控。</p><h2 id="Supervisior安装"><a href="#Supervisior安装" class="headerlink" title="Supervisior安装"></a>Supervisior安装</h2><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境:"></a>系统环境:</h2><ul><li>操作系统：Ubuntu 16.04.6 LTS</li><li>Python： 2.7.12</li></ul><ol><li><p>使用使用pip安装：（貌似可以安装最新的）</p><p>需要安装有python环境，和pip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install supervisior</span><br></pre></td></tr></table></figure></li><li><p>使用apt-get或者apt安装（发布包版本,<strong><em>推荐的安装方式</em></strong>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache show supervisor 查看supervisor的版本信息</span><br><span class="line">sudo apt install supervisor</span><br><span class="line">或者</span><br><span class="line">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure></li></ol><h2 id="Supervisior配置"><a href="#Supervisior配置" class="headerlink" title="Supervisior配置"></a>Supervisior配置</h2><p>supervisor安装完成之后，可以使用<code>echo_supervisord_conf</code>创建配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/supervisor #创建配置文件的文件夹</span><br><span class="line">sudo echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf # 创建配置文件</span><br><span class="line">sudo supervisord -c /etc/supervisor/supervisord.conf # 指定配置文件启动</span><br></pre></td></tr></table></figure><p>配置文件说明 ：</p><ol><li><p><code>[unix_http_server]</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[unix_http_server]</span></span><br><span class="line"><span class="attr">file</span>=/tmp/supervisor.sock   <span class="comment">; the path to the socket file</span></span><br><span class="line"><span class="comment">;chmod=0700                 ; socket file mode (default 0700)</span></span><br><span class="line"><span class="comment">;chown=nobody:nogroup       ; socket file uid:gid owner</span></span><br><span class="line"><span class="comment">;username=user              ; default is no username (open server)</span></span><br><span class="line"><span class="comment">;password=123               ; default is no password (open server)</span></span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th>file</th><th>/tmp/supervisor.sock</th><th>不是必须的</th></tr></thead><tbody><tr><td>chmod</td><td>0777</td><td>不是必须的</td></tr><tr><td>属性</td><td>属性值</td><td>说明</td></tr><tr><td>chown</td><td>nobody:nogroup</td><td>不是必须的</td></tr><tr><td>username</td><td>user</td><td>不是必须的</td></tr><tr><td>password</td><td>123</td><td>不是必须的</td></tr></tbody></table><ol start="2"><li><p><code>[inet_http_server]</code> 可以配置http服务，可以通过通过web服务来控制服务的启动</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;[inet_http_server]         ; inet (TCP) server disabled by default</span></span><br><span class="line"><span class="comment">;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface</span></span><br><span class="line"><span class="comment">;username=user              ; default is no username (open server)</span></span><br><span class="line"><span class="comment">;password=123               ; default is no password (open server)</span></span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>port</td><td>/tmp/supervisor.sock</td><td>访问的地址</td></tr><tr><td>username</td><td>user</td><td>授权的用户和密码</td></tr><tr><td>password</td><td>123</td><td>授权的用户和密码</td></tr><tr><td>3. <code>[include]</code> 设备</td><td></td><td></td></tr></tbody></table>   <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">files</span>=自定义服务的路径 （program配置放置的位置）</span><br><span class="line">例如：</span><br><span class="line"><span class="attr">files</span>=/etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure><ol start="4"><li>web管理方式的配置：(配置之前备份一下配置文件<code>cp supervisord.conf supervisord.conf.bak</code>)</li></ol>   <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[inet_http_server]</span></span><br><span class="line"><span class="attr">port</span>=ip:<span class="number">9001</span>      <span class="comment">#配置ip或者*</span></span><br></pre></td></tr></table></figure><h2 id="Supervisior使用"><a href="#Supervisior使用" class="headerlink" title="Supervisior使用"></a>Supervisior使用</h2><p>添加一个<strong>progam</strong>，在上述的路径 <code>/etc/supervisor/conf.d/</code>（自己配置的<strong>files</strong>位置）创建conf文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/supervisor/conf.d</span><br><span class="line">touch test.conf</span><br><span class="line">vi test.conf</span><br><span class="line"><span class="comment">## 编辑test.conf</span></span><br><span class="line">[program:XXX]   <span class="comment">#服务命令 </span></span><br><span class="line"><span class="built_in">command</span>=<span class="built_in">command</span> <span class="comment">#命令</span></span><br><span class="line">user=ubuntu</span><br><span class="line">autorestart=<span class="literal">true</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## </span></span><br><span class="line">sudo supervisorctl update <span class="comment">#更新一下配置的服务</span></span><br><span class="line">sudo supervisorctl status <span class="comment">#可以看服务的运行状态了</span></span><br><span class="line">sudo supervisorctl start XX （stop XX） 开始或者关闭服务</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Supervisiors是用python编写的linux下一款进程控制软件，控制进程的开启，停止，重启操作,可以自动重启异常中断的服务。可以通过配置webserver实现web端对服务的监控。&lt;/p&gt;
&lt;h2 id=&quot;Supervisior安装&quot;&gt;&lt;a href=&quot;#Sup
      
    
    </summary>
    
    
      <category term="CLR" scheme="http://www.henda.club/categories/CLR/"/>
    
      <category term="C#" scheme="http://www.henda.club/categories/CLR/C/"/>
    
      <category term="Net" scheme="http://www.henda.club/categories/CLR/C/Net/"/>
    
    
      <category term="supervisor" scheme="http://www.henda.club/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>阅读《高效能人士的七个习惯》的一点点反思</title>
    <link href="http://www.henda.club/2019/03/18/%E9%98%85%E8%AF%BB%E3%80%8A%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E3%80%8B%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E5%8F%8D%E6%80%9D/"/>
    <id>http://www.henda.club/2019/03/18/%E9%98%85%E8%AF%BB%E3%80%8A%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E3%80%8B%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E5%8F%8D%E6%80%9D/</id>
    <published>2019-03-18T11:14:04.000Z</published>
    <updated>2020-01-01T13:32:16.282Z</updated>
    
    <content type="html"><![CDATA[<ul><li>当我拿到这个本书的时候，我并没有第一时间打开阅读，在进入研发岗位使用电脑和搜索引擎之后，对书籍的阅读变的越来越少。最近开始看这本书，在阅读的过程中书中有些地方恰恰表现了日常工作生活中的存在的问题，也是困扰我的一些问题。<br>本书中提到的一些观点，确实点醒了我，促使我进行思考。目前看到有些观点颇受触动，总结一下。</li></ul><ul><li><p>最近一年工作事务较多，项目繁多，团队成员数量增加，感觉到了工作的压力，感觉到有些疲倦，<br>迫切的需要改变自己的状态，尝试做了一些努力，但是效果甚微，从没有思考过原因。但是看本书首先提到<strong>变化的世界，不变的原则</strong>，其中提到了几部分，此刻发生在我身上的 : </p><ul><li>恐惧和不安全感</li><li>我现在就想得到</li><li>我的定位在哪儿</li></ul></li><li><p>上述几点是我没有仔细思考的过的地方，甚至没有考虑到的。</p></li><li><h2 id="要改变现状，首先要改变自己；要改变自己，先要改变我们对问题的看法"><a href="#要改变现状，首先要改变自己；要改变自己，先要改变我们对问题的看法" class="headerlink" title="要改变现状，首先要改变自己；要改变自己，先要改变我们对问题的看法"></a><strong>要改变现状，首先要改变自己；要改变自己，先要改变我们对问题的看法</strong></h2></li><li><p>首先提到了<strong>思维模式和原则</strong> ,我认为这是一部分是非常关键的一块，可以认为是百分之一的灵感部分。</p><ul><li>由内而外全面造就自己</li><li>要改变现状，首先要改变自己</li><li>要改变自己，先要改变我们对问题的看法</li></ul><p>我为何认为这一部分非常重要，其实也是工作生活中的一点儿总结吧。</p><blockquote><p>就由内而外<strong>全面</strong>造就自己这一面来讲，自己始终认为自己是一个单纯的开发人员，干好自己的本职工作就OK，把自己的技术能力提升即可，至于其他的什么方面也就马马虎虎，认为并不是特别重要的部分，单纯的注重个人的技术能力，而忽略了人际效能。</p></blockquote><blockquote><p>要改变现状，首先要改变自己和要改变自己，先要改变我们对问题的看法我列成两点，其实已经意识到需要改变自己，也有着手操作，但是感觉有些手足无措。看了本书这部分，思考了一下，发现自己始终按照原有的思维定式和解决变化的现实问题，结果可以预料。而且有时候身处事件中，无法跳出事情本身，站在更高的一个高度来看问题，看问题局限在自己的一个小领域。这都是使用固有思维方式来解读事件问题。<br>  在提到的成长和改变的学则中提到<strong>聆听</strong>，聆听需要<strong>耐心，坦诚和理解对方的愿望</strong>，这是我所匮乏和忽略了的重要品质，也是当前团队协作的问题所在。</p></blockquote></li><li><p>本书我只看了一部分，并没有全部看完，上述的几个点，十分有感触，我认为本书中一本值得思考总结的方法论。（//TODO） </p><h2 id="七个习惯的理解"><a href="#七个习惯的理解" class="headerlink" title="七个习惯的理解"></a>七个习惯的理解</h2><ul><li>1 积极主动：主动积极即采取主动，为自己过去、现在及未来的行为负责，并依据原则及价值观，而非情绪或外在环境来下决定。</li><li>2 以终为始： 先是在脑海里酝酿，其次才是实质的创造。我认识是目标导向。</li><li>3 要事第一 ：要事第一即实质的创造，是梦想的组织与实践,</li><li>4 双赢思维 ：双赢思维鼓励我们解决问题，并协助个人找到互惠的解决方法，是一种资讯、力量、认可及报酬的分享</li><li>5 知彼解己 ：注重聆听，做到真正的有效率的沟通，知道别人所需，自己所需。</li><li>6 统合综效 ：</li><li>7 不断更新 ：我理解为迭代，自身习性的迭代。</li></ul><p>《高效能人士的七个习惯》强调以原则为中心，以品德为基础，要求“由内而外”地实现个人效能和人际效能。从自己的内心做起，包括自己的思维定式、品德操守和动机，早就全面的自己。<strong>“思想决定行动，行动决定习惯，习惯决定品德，品德决定命运。”</strong> 这里强调了习惯的重要性，习惯会暴露我们的本性，影响我们的生活方式，时刻影响这我们的命运走向。就像我们的口头禅，例如：“XXXXX，习惯了”，其实这反应出一个人的本性。<br>本书将习惯定义为“知识”、“技巧”与“意愿”相互交织的结果。我认为习惯大多情况下是不自觉的情况行程。前面提到<strong>聆听</strong>，自己知道这个的重要性，但是不知道怎么听，在听这个缺乏技巧，有些情况不自觉的先入为主，没能正确理解对方的意图。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;当我拿到这个本书的时候，我并没有第一时间打开阅读，在进入研发岗位使用电脑和搜索引擎之后，对书籍的阅读变的越来越少。最近开始看这本书，在阅读的过程中书中有些地方恰恰表现了日常工作生活中的存在的问题，也是困扰我的一些问题。&lt;br&gt;本书中提到的一些观点，确实点醒了我，
      
    
    </summary>
    
    
      <category term="图书" scheme="http://www.henda.club/categories/%E5%9B%BE%E4%B9%A6/"/>
    
    
      <category term="七个习惯" scheme="http://www.henda.club/tags/%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
    
  </entry>
  
  <entry>
    <title>批量Bake场景</title>
    <link href="http://www.henda.club/2015/01/15/%E6%89%B9%E9%87%8FBake%E5%9C%BA%E6%99%AF/"/>
    <id>http://www.henda.club/2015/01/15/%E6%89%B9%E9%87%8FBake%E5%9C%BA%E6%99%AF/</id>
    <published>2015-01-15T16:46:22.000Z</published>
    <updated>2020-01-01T13:32:16.282Z</updated>
    
    <content type="html"><![CDATA[<p>最近经常需要Bake场景，但是Bake又是一个非常消耗时间的过程！如果能有一个功能来实现批量Bake场景的功能，这样一来就可以在晚上开始Bake。Untiy3D 提供了编辑器扩张的功能，在此尝试扩展出批量Bake的功能！<br> <a id="more"></a><br>下载<a href="https://gist.github.com/John-pc/38208f78d7f72b1a4c01" target="_blank" rel="noopener">BatchBakeScenes</a>文件，放在Editor文件目录下就OK了！<br><img src="/img/2015/BatchBakeScenes.png" alt="界面如下"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近经常需要Bake场景，但是Bake又是一个非常消耗时间的过程！如果能有一个功能来实现批量Bake场景的功能，这样一来就可以在晚上开始Bake。Untiy3D 提供了编辑器扩张的功能，在此尝试扩展出批量Bake的功能！&lt;br&gt;
    
    </summary>
    
    
      <category term="3D" scheme="http://www.henda.club/categories/3D/"/>
    
    
      <category term="Unity3D" scheme="http://www.henda.club/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>Unity3D 模型中文节点的另类解决办法</title>
    <link href="http://www.henda.club/2014/11/21/Unity3D/"/>
    <id>http://www.henda.club/2014/11/21/Unity3D/</id>
    <published>2014-11-21T11:14:04.000Z</published>
    <updated>2020-01-01T13:32:16.282Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="3D" scheme="http://www.henda.club/categories/3D/"/>
    
    
      <category term="Unity3D" scheme="http://www.henda.club/tags/Unity3D/"/>
    
  </entry>
  
</feed>
